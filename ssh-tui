#!/bin/bash
export CONF_DIR="$HOME/.ssh-tui"
export PUBKEY="$HOME/.ssh/*.pub"
export BACKTITLE="SSH-TUI(TSHELL) by lofyer, v1.2"
export TMP_ANS="/tmp/ssh-tui-tmp-$$"

init(){
    if [ -e "$CONF_DIR" ]
    then
        return
    fi
    mkdir "$CONF_DIR"
    if [ $? != 0 ]
    then
        dialog --clear --backtitle "$BACKTITLE" --title "ERROR" --ok-label "OK" --infobox "Make sure that you have write permission in ~/" 14 60
        exit
    fi
    if [ -e "~/.ssh/config" ]
    then
        return
    else
        echo -e "Host *\nServerAliveInterval 60\nServerAliveCountMax 5" > ~/.ssh/config
        chmod 644 ~/.ssh/config
    fi
    if [ -e "$PUBKEY" ]
    then
        return
    else
        dialog --clear --backtitle "$BACKTITLE" --title "ERROR" --ok-label "OK" --infobox "No pub key found. Press OK to create." 14 60
        ./key-generate.exp $HOME
    fi
}

show_list(){
    while true
    do
        local SESSION_FILES=($(ls $CONF_DIR/*.session))
        local MENU=
        local COUNT=0
        for i in ${SESSION_FILES[@]}
        do
            COUNT=$[COUNT+1]
            MENU="${MENU} ${COUNT} $(basename $i)"
        done
        local OPTIONS=(${MENU})
    
        dialog --clear --backtitle "$BACKTITLE" \
            --ok-label "Select" --cancel-label "Back" \
            --title "Connect" \
            --menu "Select session profile" 14 60 6 \
            "${OPTIONS[@]}" \
            2>$TMP_ANS
        if [ $? != 0 ]
        then
            break
        fi
        clear
        local ANSWER=$(cat $TMP_ANS)
        local SESSION=($(cat ${SESSION_FILES[$(($ANSWER-1))]}))
        echo "ssh ${SESSION[1]}@${SESSION[2]} -p${SESSION[3]}"
        echo ${SESSION[@]}
        if [[ ${SESSION[@]} == *"PROXY_FLAG"* ]]; then
            ssh -v -o ProxyCommand="nc -x ${SESSION[5]} %h %p" -o ConnectTimeout=10 -o ConnectionAttempts=1 ${SESSION[1]}@${SESSION[2]} -p${SESSION[3]}
        else
            ssh -v -o ConnectTimeout=10 -o ConnectionAttempts=1 ${SESSION[1]}@${SESSION[2]} -p${SESSION[3]}
        fi
    done
}

add_list(){
    dialog --clear --backtitle "$BACKTITLE" \
        --ok-label "OK" --cancel-label "Back" --title "PROFILE INFOMATION" \
        --inputbox "Input profile name" 14 60 \
        2>$TMP_ANS
    if [ $? != 0 ]
    then
        return 1
    fi
    local PROFILE_NAME=$(cat $TMP_ANS)
    CMD=$(touch $CONF_DIR/$PROFILE_NAME.session)
    echo $PROFILE_NAME > $CONF_DIR/$PROFILE_NAME.session

    # username
    dialog --clear --backtitle "$BACKTITLE" \
        --ok-label "OK" --cancel-label "Back" --title "PROFILE INFOMATION" \
        --inputbox "Input username" 14 60 "root" \
        2>$TMP_ANS
    if [ $? != 0 ]
    then
        rm -fr $CONF_DIR/$PROFILE_NAME.session
        return 1
    fi
    local USERNAME=$(cat $TMP_ANS)
    echo $USERNAME >> $CONF_DIR/$PROFILE_NAME.session

    # host
    dialog --clear --backtitle "$BACKTITLE" \
        --ok-label "OK" --cancel-label "Back" --title "PROFILE INFOMATION" \
        --inputbox "Input hostname or IP" 14 60 \
        2>$TMP_ANS
    if [ $? != 0 ]
    then
        rm -fr $CONF_DIR/$PROFILE_NAME.session
        return 1
    fi
    local HOSTNAME=$(cat $TMP_ANS)
    echo $HOSTNAME >> $CONF_DIR/$PROFILE_NAME.session

    # port
    dialog --clear --backtitle "$BACKTITLE" \
        --ok-label "OK" --cancel-label "Back" --title "PROFILE INFOMATION" \
        --inputbox "Input ssh port" 14 60 "22" \
        2>$TMP_ANS
    if [ $? != 0 ]
    then
        rm -fr $CONF_DIR/$PROFILE_NAME.session
        return 1
    fi
    local PORT=$(cat $TMP_ANS)
    echo $PORT >> $CONF_DIR/$PROFILE_NAME.session
    sync

    # proxy
    dialog --clear --backtitle "$BACKTITLE" \
        --ok-label "Yes" --cancel-label "No" --title "PROFILE INFOMATION" \
        --yesno "Use proxy?" 14 60 \
        2>&1 >/dev/tty
    if [[ $? == 0 ]]
    then
        dialog --clear --backtitle "$BACKTITLE" \
            --ok-label "OK" --cancel-label "Back" --title "PROFILE INFOMATION" \
            --inputbox "Input proxy" 14 60 "127.0.0.1:1086" \
            2>$TMP_ANS
        if [ $? != 0 ]
        then
            local PROXY=$(cat $TMP_ANS)
            echo "PROXY_FLAG" >> $CONF_DIR/$PROFILE_NAME.session
            echo $PROXY >> $CONF_DIR/$PROFILE_NAME.session
        fi
        sync
    fi

    # ssh-copy-id
    dialog --clear --backtitle "$BACKTITLE" \
        --ok-label "Yes" --cancel-label "No" --title "PROFILE INFOMATION" \
        --yesno "Try copy id to the host?" 14 60 \
        2>&1 >/dev/tty
    if [[ $? == 0 ]]
    then
        ssh-copy-id $USERNAME@$HOSTNAME -p $PORT
    fi
}

delete_list(){
    local MENU=
    local COUNT=0
    local SESSION_FILES=($(ls $CONF_DIR/*.session))
    if [[ $SESSION_FILES == "" ]]
    then
        return
    fi

    for i in ${SESSION_FILES[@]}
    do
        COUNT=$[COUNT+1]
        MENU="${MENU} ${COUNT} $i off"
    done

    local OPTIONS=(${MENU})
    local CHOICES=$(dialog --separate-output --checklist "Select options:" 22 76 16 "${OPTIONS[@]}" 2>&1 >/dev/tty)

    if [ $? != 0 ]
    then
        break
    fi

    for CHOICE in $CHOICES
    do
        rm -fr ${SESSION_FILES[$(($CHOICE-1))]}
    done
}

main(){
    while true
    do
        dialog --clear --backtitle "$BACKTITLE" --ok-label "Select" --cancel-label "Exit" --title "Menu" --menu "Select action" 14 60 6 \
            "List" "Show all the session" \
            "Add" "Add new session" \
            "Delete" "Delete session from list" \
            2>$TMP_ANS
        if [[ $? == 1 ]]
        then
            break
        fi
        advanced_answer=$(cat $TMP_ANS)
        case $advanced_answer in
            "List") show_list;;
            "Add") add_list;;
            "Delete") delete_list;;
        esac
    done
}

init
main
